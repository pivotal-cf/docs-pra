---
title: Minimal Viable Platform
owner: Customer[0]
---

<strong><%= modified_date %></strong>

Starting small is a great way to establish a container-ready infrastructure. You can read more about each of the key components in subsequent chapters but at this point we introduce the smallest single configuration recommended for getting started. This configuration is validated as stable and functional for timed trials, proofs-of-concept, small, non-production-grade application deployments requiring only host level fault tolerance, or for remote/branch office operation.

## <a id='starter_kit'></a>Starter Kit Applied to TAS for VMs or TKGI

Starter Kit Applied to TAS for VMs
![TAS4VMs Starter Kit](./images/TA4V_TAS4VMs_vSphere_NSX-T_MVP1.png)
[View a larger version of this diagram](./images/TA4V_TAS4VMs_vSphere_NSX-T_MVP1.png).

Starter Kit Applied to TKGI
![TKGi Starter Kit](./images/TA4V_TKGi_vSphere_NSX-T_MVP1_Shared_T1.png)
[View a larger version of this diagram](./images/TA4V_TKGi_vSphere_NSX-T_MVP1_Shared_T1.png).

**This configuration includes the following key components:**

* VxRail Appliances in a four node configuration
* VxRail HCI System Software deployed for server firmware and vSphere provisioning
* Leaf-Spine switching in a redundant configuration (not shown)
* vSAN storage configured as sole storage target
* Application container platform of choice, either Tanzu Application Platform (TAS) for VMs or Tanzu Kubernetes Grid-integrated (TKGI)
* NSX-T Data Center network virtualization and security platform for either TAS, TKGI or both
* Host groups as needed to organize components for high availability

**The following trade-offs have been made in the Starter Kit platform including:**

* Overall capacity for applications is shared with the management infrastructure
* Management and operational components are kept to a minimum to reduce waste and speed recovery after a failure event
* Storage is purposely kept simple for stable operation during service outages, patching or unplanned outages
* A maximum of a single host can be out of service at any one time in order to maintain normal operations

Also, consider that vSphere Dynamic Resource Scheduling (DRS) can be applied to steer VMs either apart from each other (anti-affinity) or towards each other (affinity). DRS can be used to keep redundant services (e.g. Gorouters) apart in order to facilitate survivability during an outage.

**Note about DRS rules:** When using DRS, we recommend using the "should" rule vs the "must" rule. This will allow VMs that violate the DRS rule to power on anyway as opposed to being denied power on. For example, you have three AZs and eleven Gorouters. With a DRS anti-affinity "should" rule they will deploy on each server separately and then overlap but all power on. With the "must" rule, only four will power on and the others will not, as they can not be placed on a server away from the others.

The next steps of system growth will be discussed in subsequent chapters.
